version: '3.8'

services:
  # 前端服务 (SvelteKit)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - PUBLIC_API_URL=${PUBLIC_API_URL:-http://localhost:8080}
      - PUBLIC_WS_URL=${PUBLIC_WS_URL:-ws://localhost:8080}
      - PUBLIC_APP_NAME=${PUBLIC_APP_NAME:-AI创作平台}
      - PUBLIC_APP_VERSION=${PUBLIC_APP_VERSION:-1.0.0}
      - NODE_ENV=production
    depends_on:
      - backend
    restart: unless-stopped

  # 后端服务 (Go + Gin)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "${APP_PORT:-8080}:8080"
    environment:
      # 应用配置
      - APP_ENV=${APP_ENV:-production}
      - APP_PORT=8080
      - APP_HOST=0.0.0.0
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=${LOG_FORMAT:-json}
      - GIN_MODE=${GIN_MODE:-release}
      
      # 数据库配置
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME:-ai_creative}
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_SSL_MODE=${DB_SSL_MODE:-disable}
      
      # Redis配置
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - REDIS_DB=${REDIS_DB:-0}
      
      # Qdrant配置
      - QDRANT_URL=http://qdrant:6333
      - QDRANT_API_KEY=${QDRANT_API_KEY:-}
      
      # JWT配置
      - JWT_SECRET=${JWT_SECRET:-your-super-secret-jwt-key-change-in-production}
      - JWT_EXPIRES_IN=${JWT_EXPIRES_IN:-24h}
      - JWT_REFRESH_EXPIRES_IN=${JWT_REFRESH_EXPIRES_IN:-168h}
      
      # AI服务配置
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - OPENAI_ORG_ID=${OPENAI_ORG_ID:-}
      - OPENAI_BASE_URL=${OPENAI_BASE_URL:-https://api.openai.com/v1}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
      - ANTHROPIC_BASE_URL=${ANTHROPIC_BASE_URL:-https://api.anthropic.com}
      - AI_DEFAULT_MODEL=${AI_DEFAULT_MODEL:-gpt-4}
      - AI_MAX_TOKENS=${AI_MAX_TOKENS:-2000}
      - AI_TEMPERATURE=${AI_TEMPERATURE:-0.7}
      - AI_TIMEOUT=${AI_TIMEOUT:-30s}
      
      # 安全配置
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:5173}
      - RATE_LIMIT_REQUESTS=${RATE_LIMIT_REQUESTS:-100}
      - RATE_LIMIT_WINDOW=${RATE_LIMIT_WINDOW:-1m}
      - BCRYPT_COST=${BCRYPT_COST:-12}
      
      # 文件存储配置
      - STORAGE_TYPE=${STORAGE_TYPE:-local}
      - STORAGE_PATH=${STORAGE_PATH:-./uploads}
      - UPLOAD_MAX_SIZE=${UPLOAD_MAX_SIZE:-10MB}
      - UPLOAD_ALLOWED_TYPES=${UPLOAD_ALLOWED_TYPES:-.txt,.md,.json}
    depends_on:
      - postgres
      - redis
      - qdrant
    restart: unless-stopped

  # PostgreSQL数据库
  postgres:
    image: postgres:16-alpine
    container_name: ai-creative-postgres
    environment:
      - POSTGRES_DB=${DB_NAME:-ai_creative}
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/migrations:/docker-entrypoint-initdb.d
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: ai-creative-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Qdrant向量数据库
  qdrant:
    image: qdrant/qdrant:latest
    container_name: ai-creative-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Nginx反向代理
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped

  # Grafana可视化
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: bridge